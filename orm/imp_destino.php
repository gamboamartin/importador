<?php
namespace gamboamartin\importador\models;
use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class imp_destino extends _modelo_parent{

    public function __construct(PDO $link){
        $tabla = 'imp_destino';
        $columnas = array($tabla=>false,'imp_origen'=>$tabla,'imp_database'=>$tabla,'imp_server'=>'imp_database','adm_seccion'=>'imp_origen');
        $campos_obligatorios[] = 'descripcion';
        $campos_obligatorios[] = 'descripcion_select';
        $campos_obligatorios[] = 'imp_origen_id';
        $campos_obligatorios[] = 'imp_database_id';
        $campos_obligatorios[] = 'ultimo_id_origen';
        $campos_obligatorios[] = 'fecha_ultima_ejecucion';


        $columnas_extra = array();

        $tipo_campos = array();


        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, columnas_extra: $columnas_extra, tipo_campos: $tipo_campos);

        $this->NAMESPACE = __NAMESPACE__;
    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        if(!isset($this->registro['descripcion'])){
            $registro = $this->descripcion(registro: $this->registro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error asignar descripcion', data: $registro);
            }
            $this->registro = $registro;
        }
        if(!isset($this->registro['ultimo_id_origen'])){
            $this->registro['ultimo_id_origen'] = 0;
        }
        if(!isset($this->registro['fecha_ultima_ejecucion'])){
            $this->registro['fecha_ultima_ejecucion'] = date('Y-m-d H:i:s');
        }
        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta', data: $r_alta_bd);
        }
        return $r_alta_bd;
    }

    private function descripcion(array $registro){
        $imp_origen = (new imp_origen(link: $this->link))->registro(registro_id: $registro['imp_origen_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener imp_origen', data: $imp_origen);
        }
        $imp_database = (new imp_database(link: $this->link))->registro(registro_id: $registro['imp_database_id']);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener imp_database', data: $imp_database);
        }


        $descripcion = $imp_origen['imp_server_ip'].' '.$imp_origen['imp_database_descripcion'];
        $descripcion .= ' '.$imp_origen['adm_seccion_descripcion'].' '.$imp_database['imp_server_ip'];
        $descripcion .= ' '.$imp_database['imp_database_descripcion'];

        $registro['descripcion'] = $descripcion;
        return $registro;
    }

    public function modifica_bd(array $registro, int $id, bool $reactiva = false, array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        if(!isset($registro['descripcion'])){
            $registro = $this->descripcion(registro: $registro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error asignar descripcion', data: $registro);
            }
        }

        $r_modifica_bd= parent::modifica_bd(registro: $registro, id: $id,reactiva:  $reactiva,keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar', data: $r_modifica_bd);
        }
        return $r_modifica_bd;

    }


}