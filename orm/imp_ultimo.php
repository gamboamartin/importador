<?php
namespace gamboamartin\importador\models;
use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class imp_ultimo extends _modelo_parent{

    public function __construct(PDO $link){
        $tabla = 'imp_ultimo';
        $columnas = array($tabla=>false,'imp_destino'=>$tabla,'imp_origen'=>'imp_destino','imp_database'=>'imp_origen',
            'adm_seccion'=>'imp_origen','adm_namespace'=>'adm_seccion');
        $campos_obligatorios[] = 'imp_destino_id';
        $campos_obligatorios[] = 'id_ultimo';



        $columnas_extra = array();

        $tipo_campos = array();


        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, columnas_extra: $columnas_extra, tipo_campos: $tipo_campos);

        $this->NAMESPACE = __NAMESPACE__;
    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        if(!isset($this->registro['descripcion'])){
            $registro = $this->descripcion(id: -1, registro: $this->registro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error asignar descripcion', data: $registro);
            }
            $this->registro = $registro;
        }

        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta', data: $r_alta_bd);
        }
        return $r_alta_bd;
    }



    /**
     * Integra la descripcion en un registro en proceso de alta o modifica
     * @param int $id Identificador de la entidad
     * @param array $registro Registro en proceso
     * @return array
     */
    private function descripcion(int $id, array $registro): array
    {
        $existen_foraneas = true;
        $imp_destino_id = -1;

        if(!isset($registro['imp_destino_id'])|| !isset($registro['imp_destino_id'])){
            $existen_foraneas = false;
        }

        if(isset($registro['imp_destino_id'])){
            $imp_destino_id = $registro['imp_destino_id'];
        }

        if(!$existen_foraneas) {
            $registro_previo = $this->registro(registro_id: $id);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al obtener registro_previo', data: $registro_previo);
            }

            if (!isset($registro['imp_destino_id'])) {
                $imp_destino_id = $registro_previo['imp_destino_id'];
            }

        }

        $imp_destino = (new imp_destino(link: $this->link))->registro(registro_id: $imp_destino_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener imp_destino', data: $imp_destino);
        }

        $descripcion = $imp_destino['imp_server_ip'].' '.$imp_destino['imp_database_descripcion'];
        $descripcion .= ' '.$imp_destino['adm_seccion_descripcion'];
        $registro['descripcion'] = $descripcion;
        return $registro;
    }



    public function modifica_bd(array $registro, int $id, bool $reactiva = false, array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        if(!isset($registro['descripcion'])){
            $registro = $this->descripcion(id: $this->registro_id, registro: $registro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error asignar descripcion', data: $registro);
            }
        }

        $r_modifica_bd= parent::modifica_bd(registro: $registro, id: $id,reactiva:  $reactiva,keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al modificar', data: $r_modifica_bd);
        }
        return $r_modifica_bd;

    }


}